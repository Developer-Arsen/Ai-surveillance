
Task 14. Virtual Functions and Polymorphism
Modify the Shape class to make the area calculation method virtual. 
Create a function that takes a pointer to a Shape and prints its area, 
demonstrating polymorphic behavior. This task explores dynamic polymorphism and the use of virtual functions.

Task 15. Implementing a File-Based Sorting Application Using Classes
Refactor the sorting algorithm selector to leverage the power of C++ classes,
encapsulating the sorting algorithms, file operations, and user interactions within
a class structure. This approach enhances the modularity, maintainability, and scalability of the code.

SortingStrategy Class
Create an abstract base class named SortingStrategy with a pure virtual function sort
that takes a reference to a vector of integers. This class will serve as the interface for all sorting algorithms.

Concrete Sorting Classes
Implement concrete classes for each sorting algorithm, such as BubbleSort and SelectionSort,
that inherit from SortingStrategy and override the sort method.

FileHandler Class
Design a FileHandler class responsible for reading an array of integers from a file and 
writing the sorted array back to a file. This class should have methods like readArrayFromFile and saveArrayToFile.

SortingApplication Class
Develop a SortingApplication class that encapsulates the application logic. 
It should include a SortingStrategy pointer to dynamically select the sorting algorithm,
a FileHandler object for file operations, and methods to prompt the user for input and execute the sorting process.

User Input for File Names and Sorting Selection
Within the SortingApplication class, implement a method to prompt the user for the input
file name, the output file name, and the choice of sorting algorithm.

Main Function Logic
In the main function, create an instance of the SortingApplication class and call its methods to run the sorting process.



Task 16. File-Based Sorting Application with Constructors and Destructors
Refine the class-based sorting application by incorporating constructors and destructors
to manage resources more effectively, initialize class members, and ensure clean-up processes are executed properly.
This enhancement will illustrate the importance of constructors and destructors in resource management and object initialization within C++.

Enhance SortingStrategy Class
Modification: Add a virtual destructor to the SortingStrategy abstract base class to ensure derived class
destructors are called correctly when deleting objects through a base class pointer.

Implement Constructors in Concrete Sorting Classes
Modification: Provide constructors (and optionally, destructors) in BubbleSort and SelectionSort classes
for initializing any required resources or settings specific to the sorting algorithm.

Enhance FileHandler Class with Constructor and Destructor
Modification: Implement a constructor in the FileHandler class to initialize any necessary resources
(like opening a file stream) and a destructor to ensure any open file streams are properly closed.

SortingApplication Class with Constructors and Destructors
Modification: Define a constructor in the SortingApplication class for initializing the FileHandler
and setting up the application environment. Implement a destructor to clean up any dynamically allocated resources if necessary.

Implement Resource Management
Focus on proper resource management, especially when dealing with file I/O and dynamic memory
allocation, to prevent resource leaks and ensure the application runs efficiently.

Main Function Setup
Utilize constructors to set up your application environment and sorting strategy dynamically based on user input.


Task 17. Exception Handling in Inheritance Hierarchies
Introduce the concept of exception handling within an inheritance hierarchy.
Create a base class Shape with an area calculation method that might throw an exception
(e.g., if the shape's dimensions are not set). Then, derive two classes from it: Circle and Rectangle.
Implement the area calculation method for each derived class to handle or throw exceptions as appropriate.

Detailed Explanation: 
Shape Class: Enhance the Shape class by including a method that could potentially throw an exception,
such as trying to calculate the area without sufficient dimensions. 
Circle and Rectangle Classes: Implement the area calculation method with appropriate exception handling.
For example, throw an exception if the radius (Circle) or sides (Rectangle) are negative or not set. 
Exception Handling: Demonstrate how derived classes can handle exceptions thrown by their base class methods or by their own methods.


