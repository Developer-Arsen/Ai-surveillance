Task 7. Implementing a Sorting Algorithm Selector using Function Pointers
Create a program that demonstrates the use of function pointers by implementing a sorting algorithm selector.
This program should allow the user to choose between at least two sorting algorithms (e.g., Bubble Sort and Selection Sort) 
to sort an array of integers.
The selection of the sorting algorithm will be done through function pointers, showcasing how they can be used to invoke different 
functions dynamically based on user input.

Define Sorting Functions
Implement two sorting algorithms as separate functions:
Bubble Sort: A simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, 
and swaps them if they are in the wrong order. Selection Sort: An algorithm that divides the input list into two parts:
the sublist of items already sorted, which is built up from left to right at the front of the list, and the sublist of
items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty, and the unsorted
sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order)
element in the unsorted sublist,swapping it with the leftmost unsorted element (putting it in sorted order), and moving
the sublist boundaries one element to the right. Define a Function Pointer Type for Sorting Define a function pointer 
type that matches the signature of the sorting functions. For example, if your sorting functions have the signature void 
sort(int* array, int size), define a function pointer type accordingly.

User Input for Sorting Selection
Prompt the user to select a sorting algorithm. Based on the user's selection, assign the corresponding sorting function to a function pointer.

Sorting an Array
Initialize an array of integers with unsorted values. Use the function pointer to invoke the selected sorting algorithm on the array.

Displaying Results
After the sorting operation completes, print the sorted array to the console.


Task 8. Enums and Structs
Define an enum for days of the week and a struct representing a Date with day, month, and year as fields. Write a function that prints the day of the 
week and the date in a readable format. This task introduces structured data types and enumerations for more organized code.


Task 9. Implementing a Custom Sorting Strategy Selector using Enums, Structs, and Function Pointers
Enhance the sorting algorithm selector program by incorporating enums to represent different sorting strategies and structs to bundle sorting functions
with their names. This variation introduces a more structured approach to selecting and invoking sorting algorithms, demonstrating how enums, structs,
and function pointers can work together to create a flexible and user-friendly program.

Define an Enum for Sorting Strategies
Create an enum named SortingStrategy with values for each sorting algorithm you plan to include (e.g., BUBBLE_SORT, SELECTION_SORT).

Define a Struct to Represent a Sorting Option
Define a struct named SortingOption that includes a SortingStrategy enum value and a function pointer to the corresponding sorting function.

Implement Sorting Functions
Code the sorting algorithms (Bubble Sort, Selection Sort) as in the previous task. Ensure each function adheres to a consistent signature to 
match the function pointer in the SortingOption struct.

Create a Sorting Option Array
Initialize an array of SortingOption structs, each representing a different sorting strategy. Populate this array with the enum value and the 
corresponding sorting function for each sorting algorithm.

User Input for Sorting Selection
Prompt the user to select a sorting algorithm by listing the options. Use the enum values in the prompt to make the selection clear.

Select and Execute the Sorting Strategy
Based on the user's input, find the corresponding SortingOption in the array and use the function pointer to invoke the selected sorting 
algorithm on an array of integers.

Displaying Results
After sorting, print the sorted array to demonstrate the result of the chosen sorting strategy.







